************************************************************************************************
* This sample program prompts for two input parameters:
*   1) Plain text
*   2) Key
*
* The plain text and key are passed into %Encrypt(). The resultant encrypted text and
* encrypted text length are returned.
*
* Then the encrypted text and key are passed into %Decrypt(). The resultant decrypted text and
* decrypted text length are returned.
*
* Finally, the plain text, encrypted text, and decrypted text are displayed as a hexdecimal
* strings, and the plain text and decrypted text are compared to verify the text was correctly
* encrypted and decrypted.
************************************************************************************************

Include dm,bp,includes crypto.inc


* Get input
* ---------
Prompt ""
Crt "Enter string: " :
Input plainText
If ( plainText = "" ) Then Stop
Crt "Enter 16-char key: " :
Input key
If ( key = "" ) Then Stop


* Prepare the %Encrypt() input
* ----------------------------
plainTextLength = Len( plainText )
encryptedTextBufferSize = 2 * plainTextLength
Char encryptedText[ encryptedTextBufferSize ]
cryptoParams = ""
cryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES128
cryptoParams< Crypto$P$inputlength > = plainTextLength
cryptoParams< Crypto$P$outputLength > = encryptedTextBufferSize
cryptoParams< Crypto$P$ClearKey > = key
encryptedTextLength = 0


* Call %Encrypt(), check the result, and extract the encrypted text
* -----------------------------------------------------------------
result = %Encrypt( cryptoParams, plainText, encryptedText,  &encryptedTextLength )
result = result[ 1, Len( result ) ] ;!!!!! @@@@@ Bug? result remains a number without this and none of the cases match.
If ( result # Crypto$Result$Success ) Then
   Crt "En" :
   Gosub ShowError
   Stop
End
encryptedText = encryptedText[ 1, encryptedTextLength ]


* Display the plain text and encrypted text as hexadecimal strings
* ----------------------------------------------------------------
Crt
Crt "The plain text string in hexadecimal:"
hexString = OConv( plainText, "mx" )
For a = 1 To Len( hexString ) Step 2
   Crt hexString[ a, 2 ] : " " :
Next a
Crt

Crt
Crt "The encrypted string in hexadecimal:"
hexString = OConv( encryptedText, "mx" )
For a = 1 To Len( hexString ) Step 2
   Crt hexString[ a, 2 ] : " " :
Next a
Crt


* Prepare the %Decrypt() input
* ----------------------------
decryptedTextBufferSize = encryptedTextLength
Char decryptedText[ decryptedTextBufferSize ]
cryptoParams< Crypto$P$inputLength > = encryptedTextLength
cryptoParams< Crypto$P$outputLength > = decryptedTextBufferSize
cryptoParams< Crypto$P$ClearKey > = key
decryptedTextLength = 0


* Call %Decrypt(), check the result, and extract the decrypted text
* -----------------------------------------------------------------
result = %Decrypt( cryptoParams, encryptedText, decryptedText, &decryptedTextLength )
result = result[ 1, Len( result ) ] ;!!!!! @@@@@ Bug? result remains a number without this and none of the cases match.
decryptedText = decryptedText[ 1, decryptedTextLength ]


* Display the decrypted text as a hexadecimal string and compare it to the original plain text
* --------------------------------------------------------------------------------------------
Crt
Crt "The decrypted string in hexadecimal:"
hexString = OConv( decryptedText, "mx" )
For a = 1 To Len( hexString ) Step 2
   Crt hexString[ a, 2 ] : " " :
Next a
Crt

Crt
Crt "The original text and decrypted text " :
If ( plainText = decryptedText ) Then Print "match. [SUCCESS]" Else Print "do not match. [ERROR]"

Stop



************************************************************************************************
ShowError:
************************************************************************************************
Crt "cryption failed with error code = ," : result : ", '" :
Begin Case
   Case result = Crypto$Result$Failed
      Crt "Unknown error type 1" :
   Case result = Crypto$Result$InvalidKey
      Crt "Invalid key length (must be 16 bytes)" :
   Case result = Crypto$Result$OutputBufferTooSmall
      Crt "Output buffer too small (must be at least twice the size of the input buffer)" :
   Case result = Crypto$Result$NoEncryption
      Crt "Encryption libraries are not loaded" :
   Case 1
      Crt "Unknown error type 2" :
End Case
Crt "'"

Return
* ShowError

End
